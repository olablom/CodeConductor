Create a Python Context Manager component that can analyze code structure and manage token limits for LLM prompts.

CRITICAL REQUIREMENTS:
1. Create a ContextManager class in context_manager.py
2. Use CORRECT imports: import ast, import asyncio (NOT from contextlib import asyncio)
3. Use ast.parse() to parse Python files (NOT ast.File)
4. Use ast.FunctionDef and ast.ClassDef (NOT ast.Def)
5. Include comprehensive tests in test_context_manager.py
6. Use type hints and proper docstrings
7. Handle edge cases and errors gracefully

The ContextManager should:
- Parse Python files using ast.parse() function
- Extract function and class definitions using ast.FunctionDef and ast.ClassDef
- Count tokens in text (simple word-based approximation)
- Provide methods to get relevant context for LLM prompts
- Include proper error handling

IMPORTANT: Use these CORRECT imports:
```python
import ast
import asyncio
from typing import Dict, List, Any, Optional
```

NOT these WRONG imports:
```python
from contextlib import asyncio  # WRONG!
from ast import File  # WRONG!
```

Please provide the code in the following format:

```context_manager.py
# Your ContextManager implementation here with CORRECT imports
```

```test_context_manager.py
# Your test cases here
```

Make sure all tests pass and the code follows PEP 8 standards. 